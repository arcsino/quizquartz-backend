# Generated by Django 5.2.5 on 2025-09-08 14:51

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={'blank': 'This field cannot be blank.', 'unique': 'A tag with that name already exists.'}, help_text='Required. Enter the name of the tag. 50 characters or fewer.', max_length=50, unique=True, verbose_name='Tag Name')),
                ('is_private', models.BooleanField(default=False, help_text='Indicates whether the tag is private.', verbose_name='Is Private')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='QuizGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(error_messages={'blank': 'This field cannot be blank.', 'unique': 'A quiz group with that title already exists.'}, help_text='Required. Enter the title of the quiz group. 100 characters or fewer.', max_length=100, unique=True, verbose_name='Group Title')),
                ('subtitle', models.CharField(blank=True, help_text='Enter a subtitle for the quiz group. 100 characters or fewer.', max_length=100, verbose_name='Group Subtitle')),
                ('description', models.TextField(blank=True, help_text='Enter a brief description of the quiz group. 500 characters or fewer.', max_length=500, verbose_name='Group Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp.', verbose_name='Updated At')),
                ('created_by', models.ForeignKey(help_text='User who created the quiz group.', on_delete=django.db.models.deletion.CASCADE, related_name='quiz_groups', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Quiz Group',
                'verbose_name_plural': 'Quiz Groups',
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question', models.TextField(error_messages={'blank': 'This field cannot be blank.'}, help_text='The question content in plain text. 500 characters or fewer.', max_length=500, verbose_name='Question')),
                ('answer', models.JSONField(error_messages={'blank': 'This field cannot be blank.'}, help_text='The correct answer(s) for the quiz question.', verbose_name='Answer')),
                ('is_checked', models.BooleanField(default=False, help_text='Indicates whether the quiz has been checked.', verbose_name='Is Checked')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp.', verbose_name='Updated At')),
                ('created_by', models.ForeignKey(help_text='User who created the quiz.', on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('related_group', models.ForeignKey(blank=True, help_text='The group this quiz belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quizzes', to='quizzes.quizgroup', verbose_name='Quiz Group')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags associated with the quiz.', related_name='quizzes', to='quizzes.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
            },
        ),
    ]
